---
title: "ABCD Demo Analysis"
format:
  html:
    page-layout: full
editor: source
theme: cosmo
---

```{r}
library(dplyr)
library(tidymodels)
library(multilevelmod)
library(ggplot2)
```

## Read in SJ's curated dataset

```{r}
df <- read.csv(
  '../data/02_intermediate/start_demo_dataset.csv',
  stringsAsFactors = TRUE, # text data is categorical
  na.strings = c("NA", ' ', 999, 777) # blank spaces are missing data
  )
dplyr::glimpse(df)
```

We also want the ability to flexibly pull in variables from other sources.

```{r}

add_variable <- function(df, filepath, var_name, stringsAsFactors = TRUE) {
  
  # trick for only reading in the columns you want when the text file is large
  columns <- c('src_subject_id', 'eventname', var)
  
  tmp <- data.table::fread(
    path, 
    select = columns, 
    stringsAsFactors = stringsAsFactors
    )

  # join
  df <- df %>% 
    left_join(
      tmp, 
      by = c('src_subject_id', 'eventname')
      )
  
  return(df)
}

# path <- '../data/01_raw/ABCDr5-1/core/substance-use/su_y_sui.csv'
# var <- 'su_isip_1_calc_l'
# 
# df <- add_variable(df, path, var)

```


We want to pay attention the data type each column is assigned and convert `int` and `dbl` (numeric) that should be `fct` (categorical).

We already made the string-type variables categorical, but R reads numerically-coded categorical variables as `int`.
There are tricky ways to sort this out, but the surest way is always to explicitly name your categorical variables.


Let's write a quick function to sort that out, and use `dplyr`'s `mutate` function to convert data types. 


Finally, because of the way R treats categorical variables, we actually want `src_subject_id` to be `chr`.



```{r}
convert_dtypes <- function(df, categorical_list) {
  df <- df %>%
    # mutate_if(is.numeric, as.factor) %>%
    # mutate_at(numeric_vars, as.numeric) %>%
    mutate(src_subject_id = as.character(src_subject_id)) %>%
    mutate(across(all_of(categorical_list), as.factor))
  
  # make sure baseline comes first
  bl <- 'baseline_year_1_arm_1'
  event_levels <- levels(df$eventname)
  event_levels <- c(bl, event_levels[!(event_levels == bl)])
  df$eventname <- factor(df$eventname, levels=event_levels)
  
  return(df)
}

categorical_list <- c(
  'demo_ed_v2',
  'demo_sex_v2',
  'demo_gender_id_v2',
  'demo_comb_income_v2',
  'demo_ed_v2_l',
  'demo_gender_id_v2_l',
  'demo_comb_income_v2_l',
  'race_ethnicity',
  'rel_family_id',
  'pds_y_ss_male_category',
  'pds_y_ss_female_category',
  'pds_y_ss_female_category_2',
  'pds_y_ss_male_cat_2',
  'reshist_addr1_coi_c5_coi_nat',
  'path_alc_youth8',
  'path_alc_youth8_l',
  'peer_deviance_2_l',
  'peer_deviance_3_l'
)

df <- convert_dtypes(df, categorical_list)
knitr::kable(head(df))
```



## Summarize Dataset

Before getting into model fitting and hypothesis testing, we want to explore a few descriptive statistics. I like to use the nifty package `tableone` for this.

```{r}
summary_vars <- c(
  'interview_age',
  'demo_sex_v2',
  'race_ethnicity'
)
tableone::CreateTableOne(
  data = df, 
  vars = summary_vars, 
  strata = 'eventname',
  test = FALSE,
  includeNA = TRUE
  )
```

Let's also check on the amount of missingness in the continuous alcohol use variable we pulled in

```{r}
df %>%
  group_by(eventname) %>%
  count(missing_alcohol = is.na(su_isip_1_calc_l)) %>%
  mutate(pct = n / sum(n)) %>%
  filter(missing_alcohol)

```

```{r}
p <- ggplot(df, aes(x = su_isip_1_calc_l, fill = eventname)) +
  geom_histogram(binwidth=1) 
p
```

Hmm. May want to deal with outliers, but in the meantime, let's take a closer look:

```{r}
p + xlim(c(0, 25)) + ylim(c(0, 5000))
```



## Predictors of Alcohol Use

As an example, we'll fit a linear mixed effects model to quantify the relationship between brain volume in two ROIs (ASEG left/right amygdala) at baseline, and alcohol sips (binary) at year 3

```{r}
create_dataset <- function(df, followup_tpt) {
  # create subsets
  X <- df %>% 
    filter(eventname == 'baseline_year_1_arm_1') %>%
    select(
      src_subject_id,
      rel_family_id,
      site_id_l,
      mri_info_deviceserialnumber,
      interview_age,
      demo_sex_v2,
      demo_comb_income_v2,
      pds_y_ss_female_category_2,
      pds_y_ss_male_cat_2,
      path_alc_youth8,
      reshist_addr1_coi_c5_coi_nat,
      cbcl_scr_syn_attention_r,
      nihtbx_fluidcomp_rs,
      smri_vol_scs_amygdalalh,
      smri_vol_scs_amygdalarh
    )
  
  y <- df %>% 
    filter(eventname == followup_tpt) %>%
    select(
      src_subject_id,
      su_isip_1_calc_l
    )
  
  # join
  sub <- X %>% left_join(y, by='src_subject_id') 
  
  return(sub)

}

followup_tpt <- '3_year_follow_up_y_arm_1'

sub <- create_dataset(df, followup_tpt)
knitr::kable(head(sub))

```


There are a couple of extra steps we'll need to take in order to make some of our categorical variables usable:


```{r}

prepare_dataset <- function(df) {
  
  df <- df %>%
    mutate(pds = ifelse(
      demo_sex_v2 == 1, #male
      pds_y_ss_male_cat_2,
      pds_y_ss_female_category_2
    )) %>%
    mutate(cfi = case_match(
      demo_comb_income_v2,
      c('1', '2', '3', '4', '5', '6') ~ '<50k',
      c('7', '8', '9') ~ '>50k<200k',
      '10' ~ '>=200k',
      .default = NA_character_
    )) %>%
    mutate(across(c(pds, cfi), as.factor))
  
  df <- df %>%
    select(!c(
      demo_comb_income_v2,
      pds_y_ss_female_category_2,
      pds_y_ss_male_cat_2,
      ))
  
  
  df <- tidyr::drop_na(df) # listwise deletion of missing data
  # 
  return(df)
}

sub <- prepare_dataset(sub)

knitr::kable(head(sub))
```



We're primarily interested (for this example) in the relationship between brain volume and later alcohol use.

```{r}
plt_sub <- sub %>%
  select(
    smri_vol_scs_amygdalalh, 
    smri_vol_scs_amygdalarh, 
    'lifetime_sips' = su_isip_1_calc_l
    ) %>%
  tidyr::pivot_longer(
    cols=c(
      smri_vol_scs_amygdalalh, 
      smri_vol_scs_amygdalarh
      ),
    names_to = 'roi',
    values_to = 'vol'
  )
  
tpt_plt <- stringr::str_replace(followup_tpt, '_y_arm_1', '')

ggplot(plt_sub, aes(x = vol, y = lifetime_sips, color = roi)) +
  geom_point() +
  theme_classic() +
  facet_wrap(~roi) +
  labs(
    title = paste('Lifetime Alcohol Sips at', tpt_plt, 'vs. Baseline Amygdala Vol'),
    y = 'Lifetime Alcohol Sips'
  )
```

Most R-based statistical methods take `formula` objects to specify the model design, where the response variable is on the left side of the `~` operator, and the terms are on the right side separated by `+`. The package `lme4`, in particular, uses special operators in the formula to specify random effects (`|`)

```{r}
# define basic model workflow using tidymodels
lmer_spec <- 
  linear_reg() %>%
  set_engine("lme", random = ~ 1 | mri_info_deviceserialnumber/rel_family_id) %>%
  set_mode("regression")

```


We'll spin up a model with minimal covariates just to see if things are working.


```{r}
# see ?lme for details

fm1 <- su_isip_1_calc_l ~ 
  smri_vol_scs_amygdalalh + 
  smri_vol_scs_amygdalarh


lmer_workflow <- 
  workflow() %>%
  add_variables(
    outcomes = su_isip_1_calc_l,
    predictors = c(
      smri_vol_scs_amygdalalh,
      smri_vol_scs_amygdalarh,
      mri_info_deviceserialnumber,
      rel_family_id,
      src_subject_id
    )) %>%
  add_model(lmer_spec, formula = fm1)

```

```{r}
m1 <- fit(lmer_workflow, data = sub)
m1
```

```{r}
m1_fit <- (extract_fit_engine(m1))
anova(m1_fit)
```

Things are working.

Okay, let's add more variables of interest and covariates.

```{r}
fm2 <- su_isip_1_calc_l ~ 
  smri_vol_scs_amygdalalh + 
  smri_vol_scs_amygdalarh +
  path_alc_youth8 +
  reshist_addr1_coi_c5_coi_nat +
  cbcl_scr_syn_attention_r +
  nihtbx_fluidcomp_rs +
  interview_age +
  demo_sex_v2 + 
  cfi +
  pds


lmer_workflow <- 
  workflow() %>%
  add_variables(
    outcomes = su_isip_1_calc_l,
    predictors = c(
      smri_vol_scs_amygdalalh,
      smri_vol_scs_amygdalarh,
      path_alc_youth8,
      reshist_addr1_coi_c5_coi_nat,
      cbcl_scr_syn_attention_r,
      nihtbx_fluidcomp_rs,
      interview_age,
      demo_sex_v2,
      cfi,
      pds,
      mri_info_deviceserialnumber,
      rel_family_id,
      src_subject_id
    )) %>%
  add_model(lmer_spec, formula = fm2)

m2 <- fit(lmer_workflow, data = sub)
m2
```

```{r}
m2_fit <- (extract_fit_engine(m2))
anova(m2_fit)
```
